require('v8-compile-cache');
const store = require('electron-store');
const log = require('electron-log');

const config = new store();

const langPack = require(config.get('lang', 'en_US') === 'ja_JP' ? '../../lang/ja_JP' : '../../lang/en_US');

log.info('Script Loaded: js/util/settings.js');

module.exports = {
    lang: {
        id: 'lang',
        title: langPack.settings.lang,
        cat: 'General',
        type: 'select',
        val: config.get('lang', 'en_US'),
        options: {
            ja_JP: '日本語',
            en_US: 'English',
        },
        restart: true,
        default: 'en_US',
    },
    autoPlay: {
        id: 'autoPlay',
        title: langPack.settings.autoPlay,
        cat: 'General',
        type: 'checkbox',
        val: config.get('autoPlay', true),
        restart: true,
        default: true,
    },
    enableResourceSwapper: {
        id: 'enableResourceSwapper',
        title: langPack.settings.enableSwapper,
        cat: 'General',
        type: 'checkbox',
        val: config.get('enableResourceSwapper', true),
        restart: true,
        default: true,
    },
    enableAltMng: {
        id: 'enableAltMng',
        title: langPack.settings.enableAltManager,
        cat: 'General',
        type: 'checkbox',
        val: config.get('enableAltMng', true),
        restart: false,
        default: true,
        onchange: 'window.gt.toggleDisplay("altMngHolder");',
    },
    enableTimer: {
        id: 'enableTimer',
        title: langPack.settings.enableTimer,
        cat: 'General',
        type: 'checkbox',
        val: config.get('enableTimer', true),
        restart: false,
        default: true,
        onchange: 'window.gt.toggleDisplay("menuTimer")',
    },
    enableRPC: {
        id: 'enableRPC',
        title: langPack.settings.enableRPC,
        cat: 'Discord',
        type: 'checkbox',
        val: config.get('enableRPC', true),
        restart: true,
        default: true,
    },
    shareMapInfo: {
        id: 'shareMapInfo',
        title: langPack.settings.shareMapInfo,
        cat: 'Discord',
        type: 'checkbox',
        val: config.get('shareMapInfo', true),
        restart: false,
        default: true,
    },
    shareModeInfo: {
        id: 'shareModeInfo',
        title: langPack.settings.shareModeInfo,
        cat: 'Discord',
        type: 'checkbox',
        val: config.get('shareModeInfo', true),
        restart: false,
        default: true,
    },
    shareClassInfo: {
        id: 'shareClassInfo',
        title: langPack.settings.shareClassInfo,
        cat: 'Discord',
        type: 'checkbox',
        val: config.get('shareClassInfo', true),
        restart: false,
        default: true,
    },
    shareTimerInfo: {
        id: 'shareTimerInfo',
        title: langPack.settings.shareTimerInfo,
        cat: 'Discord',
        type: 'checkbox',
        val: config.get('shareTimerInfo', true),
        restart: false,
        default: true,
    },
    unlimitedFPS: {
        id: 'unlimitedFPS',
        title: langPack.settings.unlimitedFPS,
        cat: 'Graphics',
        type: 'checkbox',
        val: config.get('unlimitedFPS', true),
        restart: true,
        default: true,
    },
    angleType: {
        id: 'angleType',
        title: langPack.settings.angleType,
        cat: 'Graphics',
        type: 'select',
        val: config.get('angleType', 'default'),
        restart: true,
        default: 'default',
        options: {
            default: 'Default',
            gl: 'OpenGL',
            d3d11: 'D3D11',
            d3d9: 'D3D9',
            d3d11on12: 'D3D11on12',
        },
    },
    webgl2Context: {
        id: 'webgl2Context',
        title: langPack.settings.webgl2Context,
        cat: 'Graphics',
        type: 'checkbox',
        val: config.get('webgl2Context', true),
        restart: true,
        default: true,
    },
    acceleratedCanvas: {
        id: 'acceleratedCanvas',
        title: langPack.settings.acceleratedCanvas,
        cat: 'Graphics',
        type: 'checkbox',
        val: config.get('acceleratedCanvas', true),
        restart: true,
        default: true,
    },
    easyCSSMode: {
        id: 'easyCSSMode',
        title: langPack.settings.easyCSSMode,
        cat: 'Customize',
        type: 'selectec',
        val: config.get('easyCSSMode', 'disable'),
        restart: false,
        default: 'disable',
        options: {
            type1: langPack.settings.easyCSStype1,
            type2: langPack.settings.easyCSStype2,
            type3: langPack.settings.easyCSStype3,
            type4: langPack.settings.easyCSStype4,
            type5: langPack.settings.easyCSStype5,
            custom: langPack.settings.easyCSSCustom,
            disable: langPack.settings.easyCSSDisable,
        },
    },
    userCSSPath: {
        id: 'userCSSPath',
        title: langPack.settings.userCSSPath,
        cat: 'Customize',
        type: 'fileWithEyes',
        val: config.get('userCSSPath', ''),
        restart: false,
        default: '',
    },
    showExitBtn: {
        id: 'showExitBtn',
        title: langPack.settings.showExitBtn,
        cat: 'Customize',
        type: 'select',
        val: config.get('showExitBtn', 'bottom'),
        restart: false,
        default: 'bottom',
        options: {
            top: langPack.settings.topExitBtn,
            bottom: langPack.settings.bottomExitBtn,
            disable: langPack.settings.disableExitBtn,
        },
        onchange: 'window.gt.injectExitBtn()',
    },
    joinMatchPresentRegion: {
        id: 'joinMatchPresentRegion',
        title: langPack.settings.joinMatchPresentRegion,
        cat: 'HyperQuickJoin',
        type: 'checkbox',
        val: config.get('joinMatchPresentRegion', true),
        restart: false,
        default: true,
    },
    joinMatchCustom: {
        id: 'joinMatchCustom',
        title: langPack.settings.joinMatchCustom,
        cat: 'HyperQuickJoin',
        type: 'checkbox',
        val: config.get('joinMatchCustom', false),
        restart: false,
        default: false,
    },
    joinMatchOCustom: {
        id: 'joinMatchOCustom',
        title: langPack.settings.joinMatchOCustom,
        cat: 'HyperQuickJoin',
        type: 'checkbox',
        val: config.get('joinMatchOCustom', false),
        restart: false,
        default: false,
    },
    joinMatchMode: {
        id: 'joinMatchMode',
        title: langPack.settings.joinMatchMode,
        cat: 'HyperQuickJoin',
        type: 'select',
        val: config.get('joinMatchMode', 'all'),
        restart: false,
        default: 'all',
        options: {
            all: langPack.settings.allMode,
            ffa: 'FFA',
            tdm: 'TDM',
            hp: 'Hardpoint',
            ctf: 'Capture the Flag',
            po: 'Parkour',
            has: 'Hide & Seek',
            inf: 'Infected',
            race: 'Race',
            lms: 'Last Man Standing',
            sis: 'Simon Says',
            gg: 'Gun Game',
            ph: 'Prop Hunt',
            bh: 'Boss Hunt',
            st: 'Stalker',
            koh: 'King of the Hill',
            oic: 'One in the Chamber',
            td: 'Trade',
            kc: 'Kill Confirmed',
            df: 'Defuse',
            shs: 'Sharp Shooter',
            tr: 'Traitor',
            raid: 'Raid',
            bl: 'Blitz',
            dom: 'Domination',
            kffa: 'Kranked FFA',
        },
    },
    enableLinkCmd: {
        id: 'enableLinkCmd',
        title: langPack.settings.twitchLinkCmd,
        cat: 'Twitch',
        type: 'checkbox',
        val: config.get('enableLinkCmd', false),
        restart: false,
        default: false,
    },
};